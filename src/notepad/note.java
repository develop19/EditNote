/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notepad;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author NEERAJ
 */

public class note extends javax.swing.JFrame {

    /**
     * Creates new form note
     */
    UndoManager undo = new UndoManager();
    public note() {
        initComponents();
        texpan.getDocument().addUndoableEditListener(
                new UndoableEditListener() {
                    public void undoableEditHappened(UndoableEditEvent e) {
                        undo.addEdit(e.getEdit());
                }
});
    }
    //int bold;
    //int underline;
    //int italic;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jButton6 = new javax.swing.JButton();
        fontcb = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        texpan = new javax.swing.JTextPane();
        butcolor = new javax.swing.JButton();
        butbold = new javax.swing.JToggleButton();
        butital = new javax.swing.JToggleButton();
        butunder = new javax.swing.JToggleButton();
        sizecb = new javax.swing.JComboBox();
        butsub = new javax.swing.JToggleButton();
        butsup = new javax.swing.JToggleButton();
        buthigh = new javax.swing.JToggleButton();
        cut = new javax.swing.JButton();
        copy = new javax.swing.JButton();
        paste = new javax.swing.JButton();
        butundo = new javax.swing.JButton();
        butredo = new javax.swing.JButton();
        strike = new javax.swing.JToggleButton();
        image = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 153, 153));

        jButton6.setText("a");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        fontcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Arial", "Arial Black", "Arial Black Italic", "Arial Bold", "Arial Bold Italic", "Arial Italic", "Arial Narrow", "Arial Narrow Bold", "Arial Narrow Bold Italic", "Arial Narrow Italic", "Arial Rounded MT Bold", "Arial-SM", "Blackadder ITC", "Bodoni MT", "Bodoni MT Black", "Bodoni MT Black Italic", "Bodoni MT Bold", "Bodoni MT Bold Italic", "Bodoni MT Condensed", "Bodoni MT Condensed Bold", "Bodoni MT Condensed Bold Italic", "Bodoni MT Condensed Italic", "Bodoni MT Italic", "Book Antiqua", "Book Antiqua Bold", "Book Antiqua Bold Italic", "Book Antiqua Italic", "Bookman Old Style", "Bookman Old Style Bold", "Bookman Old Style Bold Italic", "Bookman Old Style Italic", "Bookshelf Symbol 7", "Bradley Hand ITC", "Calisto MT", "Calisto MT Bold", "Calisto MT Bold Italic", "Calisto MT Italic", "Castellar", "Century Gothic", "Century Gothic Bold", "Century Gothic Bold Italic", "Century Gothic Italic", "Century Schoolbook", "Century Schoolbook Bold", "Century Schoolbook Bold Italic", "Century Schoolbook Italic", "Comic Sans MS", "Comic Sans MS Bold", "Copperplate Gothic Bold", "Copperplate Gothic Light", "Courier New", "Courier New Bold", "Courier New Bold Italic", "Courier New Italic", "Curlz MT", "Dialog.bold", "Dialog.bolditalic", "Dialog.italic", "Dialog.plain", "DialogInput.bold", "DialogInput.bolditalic", "DialogInput.italic", "DialogInput.plain", "Edwardian Script ITC", "Elephant", "Elephant Italic", "Engravers MT", "Eras Bold ITC", "Eras Demi ITC", "Eras Light ITC", "Eras Medium ITC", "Estrangelo Edessa", "Felix Titling", "Forte", "Franklin Gothic Book", "Franklin Gothic Book Italic", "Franklin Gothic Demi", "Franklin Gothic Demi Cond", "Franklin Gothic Demi Italic", "Franklin Gothic Heavy", "Franklin Gothic Heavy Italic", "Franklin Gothic Medium", "Franklin Gothic Medium Cond", "Franklin Gothic Medium Italic", "French Script MT", "Garamond", "Garamond Bold", "Garamond Italic", "Gautami", "Georgia", "Georgia Bold", "Georgia Bold Italic", "Georgia Italic", "Gigi", "Gill Sans MT", "Gill Sans MT Bold", "Gill Sans MT Bold Italic", "Gill Sans MT Condensed", "Gill Sans MT Ext Condensed Bold", "Gill Sans MT Italic", "Gill Sans Ultra Bold", "Gill Sans Ultra Bold Condensed", "Gloucester MT Extra Condensed", "Goudy Old Style", "Goudy Old Style Bold", "Goudy Old Style Italic", "Goudy Stout", "Haettenschweiler", "Impact", "Imprint MT Shadow", "Kartika", "Latha", "Lucida Bright Demibold", "Lucida Bright Demibold Italic", "Lucida Bright Italic", "Lucida Bright Regular", "Lucida Console", "Lucida Sans Demibold", "Lucida Sans Demibold Italic", "Lucida Sans Demibold Roman", "Lucida Sans Italic", "Lucida Sans Regular", "Lucida Sans Typewriter Bold", "Lucida Sans Typewriter Bold Oblique", "Lucida Sans Typewriter Oblique", "Lucida Sans Typewriter Regular", "Lucida Sans Unicode", "MS Outlook", "MS Reference Sans Serif", "MS Reference Specialty", "MV Boli", "Maiandra GD", "Mangal", "Marlett", "Microsoft Sans Serif", "Monospaced.bold", "Monospaced.bolditalic", "Monospaced.italic", "Monospaced.plain", "Monotype Corsiva", "OCR A Extended", "Palace Script MT", "Palatino Linotype", "Palatino Linotype Bold", "Palatino Linotype Bold Italic", "Palatino Linotype Italic", "Papyrus", "Perpetua", "Perpetua Bold", "Perpetua Bold Italic", "Perpetua Italic", "Perpetua Titling MT Bold", "Perpetua Titling MT Light", "Pristina", "Raavi", "Rage Italic", "Rockwell", "Rockwell Bold", "Rockwell Bold Italic", "Rockwell Condensed", "Rockwell Condensed Bold", "Rockwell Extra Bold", "Rockwell Italic", "SansSerif.bold", "SansSerif.bolditalic", "SansSerif.italic", "SansSerif.plain", "Script MT Bold", "Serif.bold", "Serif.bolditalic", "Serif.italic", "Serif.plain", "Shruti", "Sylfaen", "Symbol", "Tahoma", "Tahoma Bold", "Tera Special", "Times New Roman", "Times New Roman Bold", "Times New Roman Bold Italic", "Times New Roman Italic", "Trebuchet MS", "Trebuchet MS Bold", "Trebuchet MS Bold Italic", "Trebuchet MS Italic", "Tunga", "Tw Cen MT", "Tw Cen MT Bold", "Tw Cen MT Bold Italic", "Tw Cen MT Condensed", "Tw Cen MT Condensed Bold", "Tw Cen MT Condensed Extra Bold", "Tw Cen MT Italic", "Verdana", "Verdana Bold", "Verdana Bold Italic", "Verdana Italic", "Vrinda" }));
        fontcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontcbActionPerformed(evt);
            }
        });

        jButton1.setText("A");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        texpan.setMargin(new java.awt.Insets(5, 20, 5, 20));
        texpan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                texpanKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                texpanKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                texpanKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(texpan);

        butcolor.setText("text color");
        butcolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butcolorActionPerformed(evt);
            }
        });

        butbold.setText("B");
        butbold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butboldActionPerformed(evt);
            }
        });

        butital.setText("I");
        butital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butitalActionPerformed(evt);
            }
        });

        butunder.setText("U");
        butunder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butunderActionPerformed(evt);
            }
        });

        sizecb.setEditable(true);
        sizecb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "15", "20", "25", "30", "35", "40", "45", "50", "60", "70", "80", "90", "100", "110", "120", "130", "150", "170", "200", " " }));
        sizecb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sizecbItemStateChanged(evt);
            }
        });
        sizecb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizecbActionPerformed(evt);
            }
        });

        butsub.setText("sub");
        butsub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butsubActionPerformed(evt);
            }
        });

        butsup.setText("SUP");
        butsup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butsupActionPerformed(evt);
            }
        });

        buthigh.setText("highlight");
        buthigh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buthighActionPerformed(evt);
            }
        });

        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });

        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });

        butundo.setText("Undo");
        butundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butundoActionPerformed(evt);
            }
        });

        butredo.setText("Redo");
        butredo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butredoActionPerformed(evt);
            }
        });

        strike.setText("Strike Through");
        strike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strikeActionPerformed(evt);
            }
        });

        image.setText("Insert Image");
        image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Open");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save As");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Exit");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Cut");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Copy");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem15.setText("Paste");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Undo");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem17.setText("Redo");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem17);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Format");

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Bold");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Italic");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Underline");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Strike Through");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Alignment");

        jMenuItem7.setText("Center Text");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Left Align");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("Right Align");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fontcb, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butbold)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butunder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butital)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sizecb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butcolor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butsub)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butsup)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buthigh))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paste)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butundo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butredo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(strike)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(image)))
                        .addGap(0, 218, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(butcolor)
                    .addComponent(butbold)
                    .addComponent(butunder)
                    .addComponent(butital)
                    .addComponent(jButton6)
                    .addComponent(sizecb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butsub)
                    .addComponent(butsup)
                    .addComponent(buthigh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(copy)
                        .addComponent(paste)
                        .addComponent(butundo)
                        .addComponent(butredo)
                        .addComponent(strike)
                        .addComponent(image))
                    .addComponent(cut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        texpan.setText("");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser= new JFileChooser();
        int chooserValue=chooser.showSaveDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION){
            try {
                PrintWriter fout=new PrintWriter(chooser.getSelectedFile());
                fout.print(texpan.getText());
                fout.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(note.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
         JFileChooser chooser= new JFileChooser();
        int chooserValue=chooser.showOpenDialog(this);
        if(chooserValue==JFileChooser.APPROVE_OPTION){
             try {
                 Scanner fin = new Scanner(chooser.getSelectedFile());
                 String buffer="";
                 while(fin.hasNext())
                 {
                     buffer+=fin.nextLine()+"\n";
                 }
                 texpan.setText(buffer);   
             } catch (FileNotFoundException ex) {
                 JOptionPane.showMessageDialog(this,"File not found");
             }
            
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    StyledDocument doc = texpan.getStyledDocument();
    int from = texpan.getSelectionStart();
    int to = texpan.getSelectionEnd();
    int size = Integer.parseInt((String)sizecb.getSelectedItem());
    Style style = texpan.addStyle("I'm a Style", null);
    StyleConstants.setFontSize(style, size/2);
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
    doc.setCharacterAttributes(from, to-from, style, true);
    }//GEN-LAST:event_jButton6ActionPerformed

    Color color=Color.BLACK;
    private void butcolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butcolorActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        color = JColorChooser.showDialog(this, "Colors",Color.BLUE);
        texpan.setBackground(color);
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(to!=from)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setForeground(style, color);
            //doc.setCharacterAttributes(from, to-from, style, true);
        
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        doc.setCharacterAttributes(from, to-from, style, true);
        color=Color.BLACK;
        StyleConstants.setForeground(style, color);
        }
    }//GEN-LAST:event_butcolorActionPerformed

    private void butboldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butboldActionPerformed
        // TODO add your handling code here:
        //static int m=0;
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
        butbold.setSelected(false);
        }
    }//GEN-LAST:event_butboldActionPerformed

    private void fontcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontcbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fontcbActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        StyledDocument doc = texpan.getStyledDocument();
    int from = texpan.getSelectionStart();
    int to = texpan.getSelectionEnd();
    int size = Integer.parseInt((String)sizecb.getSelectedItem());
    Style style = texpan.addStyle("I'm a Style", null);
    StyleConstants.setFontSize(style, size*2);
    if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
    doc.setCharacterAttributes(from, to-from, style, true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void texpanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyReleased
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int carpo=texpan.getCaretPosition();
        Style style = texpan.addStyle("I'm a Style", null);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(carpo-1, 1, style, true);
        
    }//GEN-LAST:event_texpanKeyReleased

    private void butunderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butunderActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
        butunder.setSelected(false);
        }
    }//GEN-LAST:event_butunderActionPerformed

    private void butitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butitalActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
        butital.setSelected(false);
        }
    }//GEN-LAST:event_butitalActionPerformed
    //int m=1;
    private void texpanKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyPressed
        // TODO add your handling code here:
        //sizecb.setEditable(true);
       // m=1;
        //if(m!=1){
      /* texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int carpo=texpan.getCaretPosition();
        Style style = texpan.addStyle("I'm a Style", null);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        StyleConstants.setAlignment(style, 5);
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(carpo-1,1, style, true);*/
       // }
        //m++;
    }//GEN-LAST:event_texpanKeyPressed

    private void butsubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butsubActionPerformed
        // TODO add your handling code here:
        butsup.setSelected(false);
        texpan.requestFocus();
    }//GEN-LAST:event_butsubActionPerformed

    private void butsupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butsupActionPerformed
        // TODO add your handling code here:
        butsub.setSelected(false);
        texpan.requestFocus();
    }//GEN-LAST:event_butsupActionPerformed

    private void texpanKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_texpanKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_texpanKeyTyped

    private void buthighActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buthighActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        Color color1 = JColorChooser.showDialog(this, "Colors",Color.YELLOW);
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(to!=from)
        {
            
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setBackground(style, color1);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
        }
        buthigh.setSelected(false);
    }//GEN-LAST:event_buthighActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        // TODO add your handling code here:
        texpan.cut();
    }//GEN-LAST:event_cutActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        // TODO add your handling code here:
        texpan.copy();
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        // TODO add your handling code here:
        texpan.paste();
    }//GEN-LAST:event_pasteActionPerformed

    private void butundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butundoActionPerformed
        // TODO add your handling code here:
        try {
            undo.undo();
        } catch (CannotRedoException cre) {
            cre.printStackTrace();
        }
    }//GEN-LAST:event_butundoActionPerformed

    private void butredoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butredoActionPerformed
        // TODO add your handling code here:
        try {
            undo.redo();
        } catch (CannotRedoException cre) {
            cre.printStackTrace();
        }
    }//GEN-LAST:event_butredoActionPerformed

    private void strikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strikeActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        int size=Integer.parseInt((String)sizecb.getSelectedItem());
        StyleConstants.setFontSize(style, size);
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
        strike.setSelected(false);
        }
    }//GEN-LAST:event_strikeActionPerformed

    private void imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageActionPerformed
        // TODO add your handling code here:
        JFileChooser jf=new JFileChooser();

        // Show open dialog
        int option=jf.showOpenDialog(this);

        // If user chooses to insert..
        if(option==JFileChooser.APPROVE_OPTION)
        {
            File file=jf.getSelectedFile();
            if(isImage(file))
            {
                // Insert the icon
                texpan.insertIcon(new ImageIcon(file.getAbsolutePath()));

                int c=texpan.getCaretPosition();
                System.out.println(c);
            }
            else
            // Show an error message, if not an image
            JOptionPane.showMessageDialog(this,"The file is not an image.","Not Image",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_imageActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_LEFT);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_RIGHT);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butbold.doClick();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butital.doClick();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        butunder.doClick();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
        /*texpan.requestFocus();
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(from!=to)
        {
            Style style = texpan.addStyle("I'm a Style", null);
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
            doc.setCharacterAttributes(from, to-from, style, true);
            //butbold.setSelected(false);
        }*/
        texpan.requestFocus();
        strike.doClick();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        copy.doClick();
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        paste.doClick();
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        cut.doClick();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        butundo.doClick();
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        // TODO add your handling code here:
        texpan.requestFocus();
        butredo.doClick();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void sizecbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sizecbItemStateChanged
        // TODO add your handling code here:
        StyledDocument doc = texpan.getStyledDocument();
        int from = texpan.getSelectionStart();
        int to = texpan.getSelectionEnd();
        if(to!=from){
        int size = Integer.parseInt((String)sizecb.getSelectedItem());
        Style style = texpan.addStyle("I'm a Style", null);
        StyleConstants.setFontSize(style, size);
        if(butital.isSelected())
        {
            StyleConstants.setItalic(style, rootPaneCheckingEnabled);
        }
        if(butbold.isSelected())
        {
            StyleConstants.setBold(style, rootPaneCheckingEnabled);
        }
        if(butunder.isSelected())
        {
            StyleConstants.setUnderline(style, rootPaneCheckingEnabled);
        }
         if(butsup.isSelected())
        {
            
            StyleConstants.setSuperscript(style, rootPaneCheckingEnabled);
        }
        if(butsub.isSelected())
        {
            StyleConstants.setSubscript(style, rootPaneCheckingEnabled);
        }
        if(strike.isSelected())
        {
            StyleConstants.setStrikeThrough(style, rootPaneCheckingEnabled);
        }
        String family=(String)fontcb.getSelectedItem();
        StyleConstants.setFontFamily(style, family);
        StyleConstants.setForeground(style, color);
        doc.setCharacterAttributes(from, to-from, style, true);
    }
    }//GEN-LAST:event_sizecbItemStateChanged

    private void sizecbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizecbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizecbActionPerformed
   
    /**
     * @param args the command line arguments
     */
     private boolean isImage(File file)
    {
        String name=file.getName();
        return name.endsWith(".jpg") || name.endsWith(".png") || name.endsWith(".jpeg") || name.endsWith(".gif");
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new note().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton butbold;
    private javax.swing.JButton butcolor;
    private javax.swing.JToggleButton buthigh;
    private javax.swing.JToggleButton butital;
    private javax.swing.JButton butredo;
    private javax.swing.JToggleButton butsub;
    private javax.swing.JToggleButton butsup;
    private javax.swing.JToggleButton butunder;
    private javax.swing.JButton butundo;
    private javax.swing.JButton copy;
    private javax.swing.JButton cut;
    private javax.swing.JComboBox fontcb;
    private javax.swing.JButton image;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton paste;
    private javax.swing.JComboBox sizecb;
    private javax.swing.JToggleButton strike;
    private javax.swing.JTextPane texpan;
    // End of variables declaration//GEN-END:variables
}
